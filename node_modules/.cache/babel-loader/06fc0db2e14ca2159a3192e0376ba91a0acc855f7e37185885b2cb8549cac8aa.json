{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Desktop\\\\Projects\\\\REACT\\\\power-plant-monitoring-dashboard\\\\src\\\\components\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Container, Grid, Typography, Button } from '@mui/material';\nimport PowerCard from './PowerCard';\nimport HistoricalData from './HistoricalData';\nimport Notification from './Notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = () => {\n  _s();\n  const [powerData, setPowerData] = useState({\n    voltage: 0,\n    current: 0,\n    temperature: 0,\n    pressure: 0\n  });\n  const [showHistorical, setShowHistorical] = useState(false);\n  const [notifications, setNotifications] = useState([]);\n  const fetchRealTimeData = () => {\n    const newData = {\n      voltage: Math.random() * 100,\n      current: Math.random() * 50,\n      temperature: Math.random() * 50 + 50,\n      pressure: Math.random() * 20 + 80\n    };\n    setPowerData(newData);\n    checkForAlarms(newData);\n  };\n  const checkForAlarms = data => {\n    let newNotifications = [];\n    if (data.voltage > 90) newNotifications.push('Voltage is too high!');\n    if (data.temperature > 90) newNotifications.push('Temperature is too high!');\n    setNotifications(newNotifications);\n  };\n  useEffect(() => {\n    const interval = setInterval(fetchRealTimeData, 5000);\n    return () => clearInterval(interval);\n  });\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h2\",\n      color: \"green\",\n      gutterBottom: true,\n      children: \"Power Plant Monitoring Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      color: \"success\",\n      onClick: () => setShowHistorical(!showHistorical),\n      children: [showHistorical ? 'Hide' : 'Show', \" Historical Data\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), notifications.length > 0 && /*#__PURE__*/_jsxDEV(Notification, {\n      messages: notifications\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 36\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(PowerCard, {\n        title: \"Voltage\",\n        value: `${powerData.voltage.toFixed(2)} V`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PowerCard, {\n        title: \"Current\",\n        value: `${powerData.current.toFixed(2)} A`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PowerCard, {\n        title: \"Temperature\",\n        value: `${powerData.temperature.toFixed(2)} °C`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PowerCard, {\n        title: \"Pressure\",\n        value: `${powerData.pressure.toFixed(2)} bar`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), showHistorical && /*#__PURE__*/_jsxDEV(HistoricalData, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"8exgiMzLJkKQuBWpoz4qqwQ00Xk=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Container","Grid","Typography","Button","PowerCard","HistoricalData","Notification","jsxDEV","_jsxDEV","Dashboard","_s","powerData","setPowerData","voltage","current","temperature","pressure","showHistorical","setShowHistorical","notifications","setNotifications","fetchRealTimeData","newData","Math","random","checkForAlarms","data","newNotifications","push","interval","setInterval","clearInterval","children","variant","color","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","messages","container","spacing","title","value","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/Dell/Desktop/Projects/REACT/power-plant-monitoring-dashboard/src/components/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Container, Grid, Typography, Button } from '@mui/material';\r\nimport PowerCard from './PowerCard';\r\nimport HistoricalData from './HistoricalData';\r\nimport Notification from './Notification';\r\n\r\nconst Dashboard = () => {\r\n  const [powerData, setPowerData] = useState({\r\n    voltage: 0,\r\n    current: 0,\r\n    temperature: 0,\r\n    pressure: 0,\r\n  });\r\n  const [showHistorical, setShowHistorical] = useState(false);\r\n  const [notifications, setNotifications] = useState([]);\r\n\r\n  const fetchRealTimeData = () => {\r\n    const newData = {\r\n      voltage: Math.random() * 100,\r\n      current: Math.random() * 50,\r\n      temperature: Math.random() * 50 + 50,\r\n      pressure: Math.random() * 20 + 80,\r\n    };\r\n    setPowerData(newData);\r\n    checkForAlarms(newData);\r\n  };\r\n\r\n  const checkForAlarms = (data) => {\r\n    let newNotifications = [];\r\n    if (data.voltage > 90) newNotifications.push('Voltage is too high!');\r\n    if (data.temperature > 90) newNotifications.push('Temperature is too high!');\r\n    setNotifications(newNotifications);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(fetchRealTimeData, 5000);\r\n    return () => clearInterval(interval);\r\n  });\r\n\r\n  return (\r\n    <Container>\r\n      <Typography variant=\"h2\" color=\"green\" gutterBottom>\r\n        Power Plant Monitoring Dashboard\r\n      </Typography>\r\n      <Button variant=\"contained\" color=\"success\" onClick={() => setShowHistorical(!showHistorical)}>\r\n        {showHistorical ? 'Hide' : 'Show'} Historical Data\r\n      </Button>\r\n      {notifications.length > 0 && <Notification messages={notifications} />}\r\n      <Grid container spacing={3}>\r\n        <PowerCard title=\"Voltage\" value={`${powerData.voltage.toFixed(2)} V`} />\r\n        <PowerCard title=\"Current\" value={`${powerData.current.toFixed(2)} A`} />\r\n        <PowerCard title=\"Temperature\" value={`${powerData.temperature.toFixed(2)} °C`} />\r\n        <PowerCard title=\"Pressure\" value={`${powerData.pressure.toFixed(2)} bar`} />\r\n      </Grid>\r\n      {showHistorical && <HistoricalData />}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}